version: '3.8'

services:
  # === 프론트엔드 ===
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    stdin_open: true
    tty: true
    depends_on:
      api-gateway:
        condition: service_healthy
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    restart: unless-stopped

  # === API Gateway (메인 백엔드) ===
  api-gateway:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/shared:/app/shared
      - ./backend/core:/app/core
      - ./backend/services:/app/services
      - ./logs/api-gateway:/app/logs
    depends_on:
      market-service:
        condition: service_healthy
      liquidation-service:
        condition: service_started
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=mysql+pymysql://user:password@db/kimchiscan
      - MARKET_SERVICE_URL=http://market-service:8001
      - LIQUIDATION_SERVICE_URL=http://liquidation-service:8002
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 15s
      timeout: 10s
      retries: 3

  # === Market Data Service (신규) ===
  market-service:
    build:
      context: ./backend
      dockerfile: market-data-service/Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./backend/market-data-service:/app
      - ./backend/shared:/app/shared
      - ./logs/market-service:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=market-data-service
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 20s
      timeout: 10s
      retries: 3

  # === Liquidation Service (기존 확장) ===
  liquidation-service:
    build:
      context: ./backend
      dockerfile: liquidation_service/Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./backend/liquidation_service:/app
      - ./backend/shared:/app/shared
      - ./logs/liquidation-service:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=liquidation-service
      - LOG_LEVEL=INFO
    restart: unless-stopped

  # === 데이터베이스 ===
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: kimchiscan
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: rootpassword
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # === Redis (서비스 간 데이터 공유) ===
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # === 선택사항: 로그 모니터링 ===
  log-viewer:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  mysql-data:
  redis-data:

networks:
  default:
    name: arbitrage-microservices

# 사용법:
# 기본 실행: docker-compose up --build
# 모니터링 포함: docker-compose --profile monitoring up --build
# 레거시 롤백: docker-compose -f docker-compose-legacy.yml up --build