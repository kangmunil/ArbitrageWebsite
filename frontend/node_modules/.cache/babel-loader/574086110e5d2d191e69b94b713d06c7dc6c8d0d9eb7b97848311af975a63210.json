{"ast":null,"code":"var _jsxFileName = \"/Users/mac/project/ArbitrageWebsite/frontend/src/components/FearGreedIndex.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GaugeChart from 'react-gauge-chart';\n\n/**\n * 암호화폐 공포/탐욕 지수 컴포넌트.\n * \n * Alternative.me API를 통해 암호화폐 시장의 감정 지수를 가져와\n * 게이지 차트로 시각화합니다. 0~100 점수로 표시됩니다.\n * \n * @returns {JSX.Element} 공포탐욕 지수 게이지 UI\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FearGreedIndex() {\n  _s();\n  const [indexData, setIndexData] = useState(null); // 공포탐욕 지수 데이터\n  const [loading, setLoading] = useState(true); // 데이터 로딩 상태\n  const [error, setError] = useState(null); // 에러 상태\n\n  useEffect(() => {\n    const fetchFearGreedIndex = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/fear_greed_index');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setIndexData(data);\n      } catch (e) {\n        console.error(\"Failed to fetch Fear & Greed Index:\", e);\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFearGreedIndex();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Fear & Greed Index...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error loading Fear & Greed Index: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n  if (!indexData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Fear & Greed Index data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Gauge Chart 설정\n  const gaugeChartProps = {\n    id: \"gauge-chart\",\n    nrOfLevels: 5,\n    // 5단계 (Extreme Fear, Fear, Neutral, Greed, Extreme Greed)\n    arcsLength: [0.2, 0.2, 0.2, 0.2, 0.2],\n    // 각 구간의 비율 (총합 1)\n    colors: ['#FF0000', '#FFA500', '#FFFF00', '#90EE90', '#008000'],\n    // 빨강, 주황, 노랑, 연두, 초록\n    // colors: ['#EA4228', '#F5CD19', '#5BE12C'], // 예시 색상\n    arcWidth: 0.3,\n    percent: indexData.value / 100,\n    // 0-100 값을 0-1로 변환\n    textColor: '#FFFFFF',\n    // 텍스트 색상\n    needleColor: '#FFFFFF',\n    // 바늘 색상\n    needleBaseColor: '#FFFFFF',\n    // 바늘 베이스 색상\n    hideText: false,\n    // 값 텍스트 표시\n    formatTextValue: value => `${value}%`,\n    animate: false // 애니메이션 비활성화\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      border: '1px solid #333',\n      borderRadius: '8px',\n      backgroundColor: '#1a1a1a'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fear & Greed Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GaugeChart, {\n      ...gaugeChartProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: new Date(parseInt(indexData.timestamp) * 1000).toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(FearGreedIndex, \"3dfRNUYfb5mKxEYuHB8/g85Pbjw=\");\n_c = FearGreedIndex;\nexport default FearGreedIndex;\nvar _c;\n$RefreshReg$(_c, \"FearGreedIndex\");","map":{"version":3,"names":["React","useState","useEffect","GaugeChart","jsxDEV","_jsxDEV","FearGreedIndex","_s","indexData","setIndexData","loading","setLoading","error","setError","fetchFearGreedIndex","response","fetch","ok","Error","status","data","json","e","console","children","fileName","_jsxFileName","lineNumber","columnNumber","message","gaugeChartProps","id","nrOfLevels","arcsLength","colors","arcWidth","percent","value","textColor","needleColor","needleBaseColor","hideText","formatTextValue","animate","style","padding","border","borderRadius","backgroundColor","Date","parseInt","timestamp","toLocaleDateString","year","month","day","_c","$RefreshReg$"],"sources":["/Users/mac/project/ArbitrageWebsite/frontend/src/components/FearGreedIndex.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GaugeChart from 'react-gauge-chart';\n\n/**\n * 암호화폐 공포/탐욕 지수 컴포넌트.\n * \n * Alternative.me API를 통해 암호화폐 시장의 감정 지수를 가져와\n * 게이지 차트로 시각화합니다. 0~100 점수로 표시됩니다.\n * \n * @returns {JSX.Element} 공포탐욕 지수 게이지 UI\n */\nfunction FearGreedIndex() {\n  const [indexData, setIndexData] = useState(null); // 공포탐욕 지수 데이터\n  const [loading, setLoading] = useState(true); // 데이터 로딩 상태\n  const [error, setError] = useState(null); // 에러 상태\n\n  useEffect(() => {\n    const fetchFearGreedIndex = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/fear_greed_index');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setIndexData(data);\n      } catch (e) {\n        console.error(\"Failed to fetch Fear & Greed Index:\", e);\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchFearGreedIndex();\n  }, []);\n\n  if (loading) {\n    return <p>Loading Fear & Greed Index...</p>;\n  }\n\n  if (error) {\n    return <p>Error loading Fear & Greed Index: {error.message}</p>;\n  }\n  if (!indexData) {\n    return <p>No Fear & Greed Index data available.</p>;\n  }\n\n  // Gauge Chart 설정\n  const gaugeChartProps = {\n    id: \"gauge-chart\",\n    nrOfLevels: 5, // 5단계 (Extreme Fear, Fear, Neutral, Greed, Extreme Greed)\n    arcsLength: [0.2, 0.2, 0.2, 0.2, 0.2], // 각 구간의 비율 (총합 1)\n    colors: ['#FF0000', '#FFA500', '#FFFF00', '#90EE90', '#008000'], // 빨강, 주황, 노랑, 연두, 초록\n    // colors: ['#EA4228', '#F5CD19', '#5BE12C'], // 예시 색상\n    arcWidth: 0.3,\n    percent: indexData.value / 100, // 0-100 값을 0-1로 변환\n    textColor: '#FFFFFF', // 텍스트 색상\n    needleColor: '#FFFFFF', // 바늘 색상\n    needleBaseColor: '#FFFFFF', // 바늘 베이스 색상\n    hideText: false, // 값 텍스트 표시\n    formatTextValue: value => `${value}%`,\n    animate: false, // 애니메이션 비활성화\n  };\n\n  return (\n    <div style={{ padding: '15px', border: '1px solid #333', borderRadius: '8px', backgroundColor: '#1a1a1a' }}>\n      <h3>Fear & Greed Index</h3>\n      <GaugeChart {...gaugeChartProps} />\n      <p>{new Date(parseInt(indexData.timestamp) * 1000).toLocaleDateString('ko-KR', { year: 'numeric', month: 'numeric', day: 'numeric' })}</p>\n    </div>\n  );\n}\n\nexport default FearGreedIndex;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}