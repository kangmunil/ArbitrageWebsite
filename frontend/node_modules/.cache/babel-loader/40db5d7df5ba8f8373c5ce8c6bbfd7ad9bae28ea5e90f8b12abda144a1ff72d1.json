{"ast":null,"code":"var _jsxFileName = \"/Users/mac/project/ArbitrageWebsite/frontend/src/components/LiquidationChart.js\",\n  _s = $RefreshSig$();\n/**\n * 청산 데이터 차트 컴포넌트.\n * \n * 여러 거래소의 청산 데이터를 Stacked Column 형태로 시각화합니다.\n * Long(녹색)과 Short(빨강)를 분리하여 1분 버킷마다 표시합니다.\n * \n * @returns {JSX.Element} 청산 차트 UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction LiquidationChart() {\n  _s();\n  const [chartData, setChartData] = useState(null); // Chart.js에 사용될 차트 데이터\n  const [loading, setLoading] = useState(true); // 데이터 로딩 상태\n  const [error, setError] = useState(null); // 에러 상태\n  const [selectedExchanges, setSelectedExchanges] = useState({\n    binance: true,\n    bybit: true,\n    okx: true,\n    bitmex: true,\n    bitget: true,\n    hyperliquid: true\n  }); // 표시할 거래소 선택 상태\n\n  // 거래소별 색상 설정\n  const exchangeColors = {\n    binance: {\n      long: '#10B981',\n      short: '#EF4444'\n    },\n    // 초록/빨강\n    bybit: {\n      long: '#34D399',\n      short: '#F87171'\n    },\n    okx: {\n      long: '#6EE7B7',\n      short: '#FCA5A5'\n    },\n    bitmex: {\n      long: '#A7F3D0',\n      short: '#FEB2B2'\n    },\n    bitget: {\n      long: '#D1FAE5',\n      short: '#FECACA'\n    },\n    hyperliquid: {\n      long: '#059669',\n      short: '#DC2626'\n    }\n  };\n  useEffect(() => {\n    fetchLiquidationData();\n    connectWebSocket();\n    return () => {\n      // WebSocket 연결 정리는 connectWebSocket 내부에서 처리\n    };\n  }, []);\n  useEffect(() => {\n    // 선택된 거래소가 변경되면 차트 데이터 업데이트\n    if (chartData) {\n      // 현재 데이터를 기반으로 차트 재생성\n      const mockData = generateDemoData();\n      processChartData(mockData);\n    }\n  }, [selectedExchanges]);\n\n  /**\n   * WebSocket 연결을 설정하여 실시간 청산 데이터를 수신합니다.\n   */\n  const connectWebSocket = () => {\n    let ws;\n    const connect = () => {\n      ws = new WebSocket('ws://localhost:8000/ws/liquidations');\n      ws.onopen = () => {\n        console.log('청산 데이터 WebSocket 연결됨');\n        setError(null);\n      };\n      ws.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          if (message.type === 'liquidation_initial' && message.data) {\n            // 초기 데이터 로드\n            console.log('초기 청산 데이터 수신:', message.data.length, '개 아이템');\n            processChartData(message.data);\n            setLoading(false);\n          } else if (message.type === 'liquidation_update' && message.data) {\n            // 실시간 업데이트\n            console.log('실시간 청산 데이터 업데이트:', message.data);\n            updateChartWithNewData(message.data);\n          }\n        } catch (err) {\n          console.error('WebSocket 메시지 파싱 오류:', err);\n        }\n      };\n      ws.onerror = error => {\n        console.error('WebSocket 오류:', error);\n        setError('WebSocket 연결 오류. HTTP API로 대체합니다.');\n        // WebSocket 실패 시 HTTP API 사용\n        fetchLiquidationData();\n      };\n      ws.onclose = () => {\n        console.log('청산 데이터 WebSocket 연결 끄어짐. 3초 후 재연결 시도...');\n        setTimeout(connect, 3000);\n      };\n    };\n    connect();\n\n    // cleanup 함수 반환\n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  };\n\n  /**\n   * 새로운 데이터로 차트를 업데이트합니다.\n   */\n  const updateChartWithNewData = newDataPoint => {\n    setChartData(prevData => {\n      if (!prevData) return null;\n\n      // 새 데이터 포인트를 추가하고 가장 오래된 것 제거\n      const newLabels = [...prevData.labels];\n      const newDate = new Date(newDataPoint.timestamp);\n      const newLabel = newDate.toLocaleTimeString('ko-KR', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n      newLabels.push(newLabel);\n      if (newLabels.length > 60) {\n        newLabels.shift(); // 가장 오래된 라벨 제거\n      }\n\n      // 각 데이터셋 업데이트\n      const newDatasets = prevData.datasets.map(dataset => {\n        const newData = [...dataset.data];\n\n        // 데이터셋 이름에서 거래소와 사이드 추출\n        const exchangeName = dataset.label.split(' ')[0].toLowerCase();\n        const isLong = dataset.label.includes('Long');\n\n        // 새 데이터 포인트 추가\n        const exchangeData = newDataPoint.exchanges[exchangeName];\n        if (exchangeData) {\n          const value = isLong ? exchangeData.long_volume / 1000 : -(exchangeData.short_volume / 1000);\n          newData.push(value);\n        } else {\n          newData.push(0);\n        }\n        if (newData.length > 60) {\n          newData.shift(); // 가장 오래된 데이터 제거\n        }\n        return {\n          ...dataset,\n          data: newData\n        };\n      });\n      return {\n        labels: newLabels,\n        datasets: newDatasets\n      };\n    });\n  };\n\n  /**\n   * 백엔드에서 집계된 청산 데이터를 가져옵니다. (Fallback)\n   */\n  const fetchLiquidationData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/liquidations/aggregated?limit=60');\n      const liquidationData = response.data;\n      if (liquidationData && liquidationData.length > 0) {\n        processChartData(liquidationData);\n      } else {\n        // 데모 데이터 생성 (실제 데이터가 없을 때)\n        const demoData = generateDemoData();\n        processChartData(demoData);\n      }\n      setError(null);\n    } catch (err) {\n      console.error('청산 데이터 가져오기 실패:', err);\n      setError('HTTP API로 청산 데이터를 가져오는데 실패했습니다. 데모 데이터를 표시합니다.');\n\n      // 에러 시에도 데모 데이터 표시\n      const demoData = generateDemoData();\n      processChartData(demoData);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * 데모 청산 데이터를 생성합니다.\n   */\n  const generateDemoData = () => {\n    const demoData = [];\n    const now = Date.now();\n    const exchanges = ['binance', 'bybit', 'okx', 'bitmex', 'bitget', 'hyperliquid'];\n    for (let i = 59; i >= 0; i--) {\n      const timestamp = now - i * 60 * 1000; // 1분씩 뒤로\n      const exchangesData = {};\n      exchanges.forEach(exchange => {\n        exchangesData[exchange] = {\n          long_volume: Math.random() * 1000000 + 100000,\n          // 10만 ~ 110만 USDT\n          short_volume: Math.random() * 1000000 + 100000,\n          long_count: Math.floor(Math.random() * 50) + 5,\n          short_count: Math.floor(Math.random() * 50) + 5\n        };\n      });\n      demoData.push({\n        timestamp,\n        exchanges: exchangesData,\n        total_long: Object.values(exchangesData).reduce((sum, ex) => sum + ex.long_volume, 0),\n        total_short: Object.values(exchangesData).reduce((sum, ex) => sum + ex.short_volume, 0)\n      });\n    }\n    return demoData;\n  };\n\n  /**\n   * 청산 데이터를 Chart.js 형식으로 변환합니다.\n   */\n  const processChartData = liquidationData => {\n    // 시간 라벨 생성\n    const labels = liquidationData.map(item => {\n      const date = new Date(item.timestamp);\n      return date.toLocaleTimeString('ko-KR', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n    });\n\n    // 거래소별 데이터셋 생성\n    const datasets = [];\n    const exchanges = ['binance', 'bybit', 'okx', 'bitmex', 'bitget', 'hyperliquid'];\n    exchanges.forEach(exchange => {\n      if (!selectedExchanges[exchange]) return;\n\n      // Long 포지션 청산 (양수로 표시)\n      const longData = liquidationData.map(item => {\n        const exchangeData = item.exchanges[exchange];\n        return exchangeData ? exchangeData.long_volume / 1000 : 0; // USDT를 K 단위로 변환\n      });\n\n      // Short 포지션 청산 (음수로 표시)\n      const shortData = liquidationData.map(item => {\n        const exchangeData = item.exchanges[exchange];\n        return exchangeData ? -(exchangeData.short_volume / 1000) : 0; // 음수로 변환\n      });\n      datasets.push(\n      // Long 데이터셋\n      {\n        label: `${exchange.toUpperCase()} Long`,\n        data: longData,\n        backgroundColor: exchangeColors[exchange].long,\n        borderColor: exchangeColors[exchange].long,\n        borderWidth: 1,\n        stack: exchange // 같은 거래소끼리 스택\n      },\n      // Short 데이터셋\n      {\n        label: `${exchange.toUpperCase()} Short`,\n        data: shortData,\n        backgroundColor: exchangeColors[exchange].short,\n        borderColor: exchangeColors[exchange].short,\n        borderWidth: 1,\n        stack: exchange // 같은 거래소끼리 스택\n      });\n    });\n    setChartData({\n      labels,\n      datasets\n    });\n  };\n\n  /**\n   * 거래소 선택 토글 핸들러\n   */\n  const handleExchangeToggle = exchange => {\n    setSelectedExchanges(prev => ({\n      ...prev,\n      [exchange]: !prev[exchange]\n    }));\n  };\n\n  // 차트 옵션 설정\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          filter: (legendItem, data) => {\n            // Long/Short 구분을 위해 범례 필터링\n            return legendItem.text.includes('Long') || legendItem.text.includes('Short');\n          }\n        }\n      },\n      title: {\n        display: true,\n        text: '암호화폐 청산 데이터 (1분 간격)',\n        font: {\n          size: 16,\n          weight: 'bold'\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: tooltipItems => {\n            return `시간: ${tooltipItems[0].label}`;\n          },\n          label: context => {\n            const value = Math.abs(context.parsed.y);\n            const isLong = context.parsed.y >= 0;\n            const side = isLong ? 'Long' : 'Short';\n            return `${context.dataset.label}: ${value.toLocaleString()}K USDT ${side}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: '시간'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: '청산량 (K USDT)'\n        },\n        ticks: {\n          callback: function (value) {\n            return Math.abs(value).toLocaleString() + 'K';\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    elements: {\n      bar: {\n        borderWidth: 1\n      }\n    }\n  };\n  if (loading && !chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uCCAD\\uC0B0 \\uB370\\uC774\\uD130 \\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this);\n  }\n  if (error && !chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        textAlign: 'center',\n        color: 'red'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '15px',\n      border: '1px solid #333',\n      borderRadius: '8px',\n      backgroundColor: '#1a1a1a'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: 'white',\n          marginBottom: '10px'\n        },\n        children: \"\\uCCAD\\uC0B0 \\uB370\\uC774\\uD130\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '10px',\n          marginBottom: '10px'\n        },\n        children: Object.keys(selectedExchanges).map(exchange => /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            color: 'white',\n            fontSize: '14px',\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedExchanges[exchange],\n            onChange: () => handleExchangeToggle(exchange),\n            style: {\n              marginRight: '5px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), exchange.toUpperCase()]\n        }, exchange, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px',\n          color: '#888',\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#10B981'\n          },\n          children: \"\\u25A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), \" Long \\uCCAD\\uC0B0 (\\uC704\\uCABD) /\", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#EF4444',\n            marginLeft: '10px'\n          },\n          children: \"\\u25A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), \" Short \\uCCAD\\uC0B0 (\\uC544\\uB798\\uCABD)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px'\n      },\n      children: chartData && /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        fontSize: '12px',\n        color: '#FFA500'\n      },\n      children: \"\\u26A0\\uFE0F \\uC2E4\\uC2DC\\uAC04 \\uB370\\uC774\\uD130 \\uC5F0\\uACB0 \\uC2E4\\uD328. \\uB370\\uBAA8 \\uB370\\uC774\\uD130\\uB97C \\uD45C\\uC2DC\\uD569\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n}\n_s(LiquidationChart, \"TwD47vfHqE6ESOp7zTV9yQrEhfM=\");\n_c = LiquidationChart;\nexport default LiquidationChart;\nvar _c;\n$RefreshReg$(_c, \"LiquidationChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","jsxDEV","_jsxDEV","register","LiquidationChart","_s","chartData","setChartData","loading","setLoading","error","setError","selectedExchanges","setSelectedExchanges","binance","bybit","okx","bitmex","bitget","hyperliquid","exchangeColors","long","short","fetchLiquidationData","connectWebSocket","mockData","generateDemoData","processChartData","ws","connect","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","type","length","updateChartWithNewData","err","onerror","onclose","setTimeout","readyState","OPEN","close","newDataPoint","prevData","newLabels","labels","newDate","Date","timestamp","newLabel","toLocaleTimeString","hour","minute","hour12","push","shift","newDatasets","datasets","map","dataset","newData","exchangeName","label","split","toLowerCase","isLong","includes","exchangeData","exchanges","value","long_volume","short_volume","response","get","liquidationData","demoData","now","i","exchangesData","forEach","exchange","Math","random","long_count","floor","short_count","total_long","Object","values","reduce","sum","ex","total_short","item","date","longData","shortData","toUpperCase","backgroundColor","borderColor","borderWidth","stack","handleExchangeToggle","prev","options","responsive","maintainAspectRatio","plugins","legend","position","filter","legendItem","text","title","display","font","size","weight","tooltip","callbacks","tooltipItems","context","abs","parsed","y","side","toLocaleString","scales","x","ticks","callback","interaction","mode","intersect","elements","bar","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","color","border","borderRadius","marginBottom","flexWrap","gap","keys","fontSize","alignItems","checked","onChange","marginRight","marginLeft","height","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/project/ArbitrageWebsite/frontend/src/components/LiquidationChart.js"],"sourcesContent":["/**\n * 청산 데이터 차트 컴포넌트.\n * \n * 여러 거래소의 청산 데이터를 Stacked Column 형태로 시각화합니다.\n * Long(녹색)과 Short(빨강)를 분리하여 1분 버킷마다 표시합니다.\n * \n * @returns {JSX.Element} 청산 차트 UI\n */\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction LiquidationChart() {\n  const [chartData, setChartData] = useState(null); // Chart.js에 사용될 차트 데이터\n  const [loading, setLoading] = useState(true); // 데이터 로딩 상태\n  const [error, setError] = useState(null); // 에러 상태\n  const [selectedExchanges, setSelectedExchanges] = useState({\n    binance: true,\n    bybit: true,\n    okx: true,\n    bitmex: true,\n    bitget: true,\n    hyperliquid: true\n  }); // 표시할 거래소 선택 상태\n  \n  // 거래소별 색상 설정\n  const exchangeColors = {\n    binance: { long: '#10B981', short: '#EF4444' }, // 초록/빨강\n    bybit: { long: '#34D399', short: '#F87171' },\n    okx: { long: '#6EE7B7', short: '#FCA5A5' },\n    bitmex: { long: '#A7F3D0', short: '#FEB2B2' },\n    bitget: { long: '#D1FAE5', short: '#FECACA' },\n    hyperliquid: { long: '#059669', short: '#DC2626' }\n  };\n\n  useEffect(() => {\n    fetchLiquidationData();\n    connectWebSocket();\n    \n    return () => {\n      // WebSocket 연결 정리는 connectWebSocket 내부에서 처리\n    };\n  }, []);\n  \n  useEffect(() => {\n    // 선택된 거래소가 변경되면 차트 데이터 업데이트\n    if (chartData) {\n      // 현재 데이터를 기반으로 차트 재생성\n      const mockData = generateDemoData();\n      processChartData(mockData);\n    }\n  }, [selectedExchanges]);\n\n  /**\n   * WebSocket 연결을 설정하여 실시간 청산 데이터를 수신합니다.\n   */\n  const connectWebSocket = () => {\n    let ws;\n    \n    const connect = () => {\n      ws = new WebSocket('ws://localhost:8000/ws/liquidations');\n      \n      ws.onopen = () => {\n        console.log('청산 데이터 WebSocket 연결됨');\n        setError(null);\n      };\n      \n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          \n          if (message.type === 'liquidation_initial' && message.data) {\n            // 초기 데이터 로드\n            console.log('초기 청산 데이터 수신:', message.data.length, '개 아이템');\n            processChartData(message.data);\n            setLoading(false);\n          } else if (message.type === 'liquidation_update' && message.data) {\n            // 실시간 업데이트\n            console.log('실시간 청산 데이터 업데이트:', message.data);\n            updateChartWithNewData(message.data);\n          }\n        } catch (err) {\n          console.error('WebSocket 메시지 파싱 오류:', err);\n        }\n      };\n      \n      ws.onerror = (error) => {\n        console.error('WebSocket 오류:', error);\n        setError('WebSocket 연결 오류. HTTP API로 대체합니다.');\n        // WebSocket 실패 시 HTTP API 사용\n        fetchLiquidationData();\n      };\n      \n      ws.onclose = () => {\n        console.log('청산 데이터 WebSocket 연결 끄어짐. 3초 후 재연결 시도...');\n        setTimeout(connect, 3000);\n      };\n    };\n    \n    connect();\n    \n    // cleanup 함수 반환\n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  };\n  \n  /**\n   * 새로운 데이터로 차트를 업데이트합니다.\n   */\n  const updateChartWithNewData = (newDataPoint) => {\n    setChartData(prevData => {\n      if (!prevData) return null;\n      \n      // 새 데이터 포인트를 추가하고 가장 오래된 것 제거\n      const newLabels = [...prevData.labels];\n      const newDate = new Date(newDataPoint.timestamp);\n      const newLabel = newDate.toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n      \n      newLabels.push(newLabel);\n      if (newLabels.length > 60) {\n        newLabels.shift(); // 가장 오래된 라벨 제거\n      }\n      \n      // 각 데이터셋 업데이트\n      const newDatasets = prevData.datasets.map(dataset => {\n        const newData = [...dataset.data];\n        \n        // 데이터셋 이름에서 거래소와 사이드 추출\n        const exchangeName = dataset.label.split(' ')[0].toLowerCase();\n        const isLong = dataset.label.includes('Long');\n        \n        // 새 데이터 포인트 추가\n        const exchangeData = newDataPoint.exchanges[exchangeName];\n        if (exchangeData) {\n          const value = isLong ? \n            exchangeData.long_volume / 1000 : \n            -(exchangeData.short_volume / 1000);\n          newData.push(value);\n        } else {\n          newData.push(0);\n        }\n        \n        if (newData.length > 60) {\n          newData.shift(); // 가장 오래된 데이터 제거\n        }\n        \n        return {\n          ...dataset,\n          data: newData\n        };\n      });\n      \n      return {\n        labels: newLabels,\n        datasets: newDatasets\n      };\n    });\n  };\n  \n  /**\n   * 백엔드에서 집계된 청산 데이터를 가져옵니다. (Fallback)\n   */\n  const fetchLiquidationData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('http://localhost:8000/api/liquidations/aggregated?limit=60');\n      const liquidationData = response.data;\n      \n      if (liquidationData && liquidationData.length > 0) {\n        processChartData(liquidationData);\n      } else {\n        // 데모 데이터 생성 (실제 데이터가 없을 때)\n        const demoData = generateDemoData();\n        processChartData(demoData);\n      }\n      \n      setError(null);\n    } catch (err) {\n      console.error('청산 데이터 가져오기 실패:', err);\n      setError('HTTP API로 청산 데이터를 가져오는데 실패했습니다. 데모 데이터를 표시합니다.');\n      \n      // 에러 시에도 데모 데이터 표시\n      const demoData = generateDemoData();\n      processChartData(demoData);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * 데모 청산 데이터를 생성합니다.\n   */\n  const generateDemoData = () => {\n    const demoData = [];\n    const now = Date.now();\n    const exchanges = ['binance', 'bybit', 'okx', 'bitmex', 'bitget', 'hyperliquid'];\n    \n    for (let i = 59; i >= 0; i--) {\n      const timestamp = now - (i * 60 * 1000); // 1분씩 뒤로\n      const exchangesData = {};\n      \n      exchanges.forEach(exchange => {\n        exchangesData[exchange] = {\n          long_volume: Math.random() * 1000000 + 100000, // 10만 ~ 110만 USDT\n          short_volume: Math.random() * 1000000 + 100000,\n          long_count: Math.floor(Math.random() * 50) + 5,\n          short_count: Math.floor(Math.random() * 50) + 5\n        };\n      });\n      \n      demoData.push({\n        timestamp,\n        exchanges: exchangesData,\n        total_long: Object.values(exchangesData).reduce((sum, ex) => sum + ex.long_volume, 0),\n        total_short: Object.values(exchangesData).reduce((sum, ex) => sum + ex.short_volume, 0)\n      });\n    }\n    \n    return demoData;\n  };\n\n  /**\n   * 청산 데이터를 Chart.js 형식으로 변환합니다.\n   */\n  const processChartData = (liquidationData) => {\n    // 시간 라벨 생성\n    const labels = liquidationData.map(item => {\n      const date = new Date(item.timestamp);\n      return date.toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n    });\n\n    // 거래소별 데이터셋 생성\n    const datasets = [];\n    const exchanges = ['binance', 'bybit', 'okx', 'bitmex', 'bitget', 'hyperliquid'];\n    \n    exchanges.forEach(exchange => {\n      if (!selectedExchanges[exchange]) return;\n      \n      // Long 포지션 청산 (양수로 표시)\n      const longData = liquidationData.map(item => {\n        const exchangeData = item.exchanges[exchange];\n        return exchangeData ? exchangeData.long_volume / 1000 : 0; // USDT를 K 단위로 변환\n      });\n      \n      // Short 포지션 청산 (음수로 표시)\n      const shortData = liquidationData.map(item => {\n        const exchangeData = item.exchanges[exchange];\n        return exchangeData ? -(exchangeData.short_volume / 1000) : 0; // 음수로 변환\n      });\n      \n      datasets.push(\n        // Long 데이터셋\n        {\n          label: `${exchange.toUpperCase()} Long`,\n          data: longData,\n          backgroundColor: exchangeColors[exchange].long,\n          borderColor: exchangeColors[exchange].long,\n          borderWidth: 1,\n          stack: exchange, // 같은 거래소끼리 스택\n        },\n        // Short 데이터셋\n        {\n          label: `${exchange.toUpperCase()} Short`,\n          data: shortData,\n          backgroundColor: exchangeColors[exchange].short,\n          borderColor: exchangeColors[exchange].short,\n          borderWidth: 1,\n          stack: exchange, // 같은 거래소끼리 스택\n        }\n      );\n    });\n\n    setChartData({\n      labels,\n      datasets\n    });\n  };\n\n  /**\n   * 거래소 선택 토글 핸들러\n   */\n  const handleExchangeToggle = (exchange) => {\n    setSelectedExchanges(prev => ({\n      ...prev,\n      [exchange]: !prev[exchange]\n    }));\n  };\n\n  // 차트 옵션 설정\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          filter: (legendItem, data) => {\n            // Long/Short 구분을 위해 범례 필터링\n            return legendItem.text.includes('Long') || legendItem.text.includes('Short');\n          }\n        }\n      },\n      title: {\n        display: true,\n        text: '암호화폐 청산 데이터 (1분 간격)',\n        font: {\n          size: 16,\n          weight: 'bold'\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title: (tooltipItems) => {\n            return `시간: ${tooltipItems[0].label}`;\n          },\n          label: (context) => {\n            const value = Math.abs(context.parsed.y);\n            const isLong = context.parsed.y >= 0;\n            const side = isLong ? 'Long' : 'Short';\n            return `${context.dataset.label}: ${value.toLocaleString()}K USDT ${side}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: '시간'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: '청산량 (K USDT)'\n        },\n        ticks: {\n          callback: function(value) {\n            return Math.abs(value).toLocaleString() + 'K';\n          }\n        }\n      }\n    },\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    elements: {\n      bar: {\n        borderWidth: 1,\n      },\n    },\n  };\n\n  if (loading && !chartData) {\n    return (\n      <div style={{ padding: '20px', textAlign: 'center' }}>\n        <p>청산 데이터 로딩 중...</p>\n      </div>\n    );\n  }\n\n  if (error && !chartData) {\n    return (\n      <div style={{ padding: '20px', textAlign: 'center', color: 'red' }}>\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '15px', border: '1px solid #333', borderRadius: '8px', backgroundColor: '#1a1a1a' }}>\n      <div style={{ marginBottom: '15px' }}>\n        <h3 style={{ color: 'white', marginBottom: '10px' }}>청산 데이터</h3>\n        \n        {/* 거래소 선택 체크박스 */}\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px', marginBottom: '10px' }}>\n          {Object.keys(selectedExchanges).map(exchange => (\n            <label key={exchange} style={{ color: 'white', fontSize: '14px', display: 'flex', alignItems: 'center' }}>\n              <input\n                type=\"checkbox\"\n                checked={selectedExchanges[exchange]}\n                onChange={() => handleExchangeToggle(exchange)}\n                style={{ marginRight: '5px' }}\n              />\n              {exchange.toUpperCase()}\n            </label>\n          ))}\n        </div>\n        \n        <div style={{ fontSize: '12px', color: '#888', marginBottom: '10px' }}>\n          <span style={{ color: '#10B981' }}>■</span> Long 청산 (위쪽) / \n          <span style={{ color: '#EF4444', marginLeft: '10px' }}>■</span> Short 청산 (아래쪽)\n        </div>\n      </div>\n      \n      <div style={{ height: '400px' }}>\n        {chartData && <Bar data={chartData} options={options} />}\n      </div>\n      \n      {error && (\n        <div style={{ marginTop: '10px', fontSize: '12px', color: '#FFA500' }}>\n          ⚠️ 실시간 데이터 연결 실패. 데모 데이터를 표시합니다.\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default LiquidationChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}